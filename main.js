// Generated by CoffeeScript 1.3.3
var LoadTest, argv, events, https, l, pool_size, requests, util;

events = require('events');

https = require('https');

util = require('util');

argv = require('optimist').usage('Usage: $0 -c [concurrent users] -n [num of reqs]').demand(['c', 'n']).argv;

pool_size = argv.c;

requests = argv.n;

https.globalAgent.maxSockets = pool_size;

LoadTest = (function() {

  function LoadTest(requests, pool_size) {
    this.requests = requests;
    this.pool_size = pool_size;
    this.running = 0;
    this.req_stats = [];
  }

  LoadTest.prototype.doRequest = function(callback) {
    var options, req, start, stats;
    start = stats = {
      'res_time': null,
      'status': null
    };
    options = {
      host: 'addons-dev.allizom.org',
      path: '/en-US/firefox/'
    };
    req = https.request(options, function(res) {
      return res.on('end', function() {
        stats.res_time = Date.now() - start;
        stats.status = res.statusCode;
        return callback(stats);
      });
    });
    req.on('socket', function() {
      return start = Date.now();
    });
    return req.end();
  };

  LoadTest.prototype.end = function() {
    var avg_req_time, elapsed_s, stat, sum, _i, _len, _ref;
    elapsed_s = (Date.now() - this.start) / 1000;
    sum = 0;
    _ref = this.req_stats;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      stat = _ref[_i];
      sum += stat.res_time;
    }
    avg_req_time = sum / this.good_requests;
    return console.info("%d conn/s (%d ms/conn)", this.good_requests / elapsed_s, avg_req_time);
  };

  LoadTest.prototype.next = function() {
    var self;
    self = this;
    if (this.requests <= 0) {
      if (this.running === 0) {
        this.end();
      }
      return;
    }
    this.requests--;
    this.running++;
    return this.doRequest(function(stats) {
      console.info("Request took: %dms and returned %s", stats.res_time, stats.status);
      self.req_stats.push(stats);
      self.good_requests++;
      self.running--;
      return self.next();
    });
  };

  LoadTest.prototype.run = function() {
    var i, _i, _ref;
    this.start = Date.now();
    this.good_requests = 0;
    for (i = _i = 0, _ref = this.pool_size; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.next();
    }
  };

  return LoadTest;

})();

l = new LoadTest(requests, pool_size);

l.run();
